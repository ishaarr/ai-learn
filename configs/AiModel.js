const {
    GoogleGenerativeAI,
    HarmCategory,
    HarmBlockThreshold,
  } = require("@google/generative-ai");
  
  const apiKey = process.env.NEXT_PUBLIC_GEMINI_API_KEY;
  const genAI = new GoogleGenerativeAI(apiKey);
  
  const model = genAI.getGenerativeModel({
    model: "gemini-2.0-flash",
  });
  
  const generationConfig = {
    temperature: 1,
    topP: 0.95,
    topK: 40,
    maxOutputTokens: 8192,
    responseMimeType: "application/json",
  };
  

    export const courseOutline = model.startChat({
      generationConfig,
      history: [
        {
          role: "user",
          parts: [
            {text: "Generate study material for python for exam and level of difficulty will be easy with summary of course, list of chapters, along with the summary of each chapters, topic list in each chapter ALL RESULT \nin JSON FORMAT\n"},
          ],
        },
        {
          role: "model",
          parts: [
            {text: "```json\n{\n  \"course_title\": \"Introduction to Python Programming - Exam Study Guide (Easy Level)\",\n  \"course_summary\": \"This study guide covers the fundamental concepts of Python programming, focusing on basic syntax, data types, control flow, and common libraries.  It's designed for beginners preparing for an introductory Python exam and aims to provide a clear and concise overview of essential topics.\",\n  \"difficulty\": \"Easy\",\n  \"chapters\": [\n    {\n      \"chapter_number\": 1,\n      \"chapter_title\": \"Introduction to Python and Setup\",\n      \"chapter_summary\": \"This chapter introduces the Python programming language, its history, and its applications. It also covers the process of installing Python and setting up a development environment, including using an Integrated Development Environment (IDE).\",\n      \"topics\": [\n        \"What is Python?\",\n        \"Why Learn Python?\",\n        \"History of Python\",\n        \"Python's Applications (e.g., web development, data science, scripting)\",\n        \"Installing Python (Windows, macOS, Linux)\",\n        \"Choosing an IDE (e.g., VS Code, PyCharm, Thonny)\",\n        \"Running Your First Python Program ('Hello, World!')\"\n      ]\n    },\n    {\n      \"chapter_number\": 2,\n      \"chapter_title\": \"Basic Data Types and Variables\",\n      \"chapter_summary\": \"This chapter introduces fundamental data types in Python, such as integers, floats, strings, and booleans. It also covers the concept of variables, how to assign values to them, and how to use them in simple operations.\",\n      \"topics\": [\n        \"Data Types: Integers (int), Floating-Point Numbers (float), Strings (str), Booleans (bool)\",\n        \"Variables: Definition and Naming Conventions\",\n        \"Assignment Operator (=)\",\n        \"Basic Arithmetic Operators (+, -, *, /, //, %, **)\",\n        \"String Concatenation\",\n        \"Type Conversion (int(), float(), str())\"\n      ]\n    },\n    {\n      \"chapter_number\": 3,\n      \"chapter_title\": \"Input and Output\",\n      \"chapter_summary\": \"This chapter covers how to receive input from the user using the `input()` function and how to display output to the console using the `print()` function.  It also includes formatting options for output.\",\n      \"topics\": [\n        \"The `print()` function: displaying output\",\n        \"The `input()` function: accepting user input\",\n        \"String Formatting (f-strings and .format())\",\n        \"Handling Input Data Types (converting input to integers, floats)\",\n         \"Comments in Python (single-line and multi-line)\"\n      ]\n    },\n    {\n      \"chapter_number\": 4,\n      \"chapter_title\": \"Control Flow: Conditional Statements\",\n      \"chapter_summary\": \"This chapter introduces conditional statements (`if`, `elif`, `else`) which allow you to execute different blocks of code based on certain conditions.  It also covers comparison operators and logical operators.\",\n      \"topics\": [\n        \"Comparison Operators (==, !=, >, <, >=, <=)\",\n        \"Logical Operators (and, or, not)\",\n        \"The `if` statement\",\n        \"The `if-else` statement\",\n        \"The `if-elif-else` statement\",\n        \"Nested `if` statements (basic)\"\n      ]\n    },\n    {\n      \"chapter_number\": 5,\n      \"chapter_title\": \"Control Flow: Loops\",\n      \"chapter_summary\": \"This chapter introduces loops (`for` and `while`) which allow you to repeatedly execute a block of code.  It also covers the `break` and `continue` statements for controlling loop execution.\",\n      \"topics\": [\n        \"The `for` loop: iterating over a sequence (strings, lists, ranges)\",\n        \"The `while` loop: executing code while a condition is true\",\n        \"The `range()` function\",\n        \"The `break` statement: exiting a loop\",\n        \"The `continue` statement: skipping to the next iteration\",\n        \"Nested Loops (basic)\"\n      ]\n    },\n    {\n      \"chapter_number\": 6,\n      \"chapter_title\": \"Lists\",\n      \"chapter_summary\": \"This chapter introduces lists, which are ordered, mutable collections of items. It covers creating lists, accessing elements, modifying lists, and common list methods.\",\n      \"topics\": [\n        \"Creating Lists: using square brackets []\",\n        \"Accessing List Elements: using indexing (e.g., my_list[0])\",\n        \"List Slicing (e.g., my_list[1:4])\",\n        \"List Methods: `append()`, `insert()`, `remove()`, `pop()`, `len()`, `index()`\",\n        \"Iterating through a List using a `for` loop\",\n        \"Checking for Membership: using the `in` operator\"\n      ]\n    },\n     {\n      \"chapter_number\": 7,\n      \"chapter_title\": \"Functions\",\n      \"chapter_summary\": \"This chapter introduces the concept of functions, which are reusable blocks of code. It covers defining functions, calling functions, passing arguments, and returning values.\",\n      \"topics\": [\n        \"Defining Functions: using the `def` keyword\",\n        \"Function Names and Parameters\",\n        \"Calling Functions\",\n        \"Passing Arguments to Functions (positional and keyword arguments)\",\n        \"Returning Values from Functions: using the `return` statement\",\n        \"Scope of Variables (local and global variables - introductory level)\",\n        \"Docstrings (basic)\"\n      ]\n    }\n  ]\n}\n```"},
          ],
        },
        {
          role: "user",
          parts: [
            {text: "Generate study material for python for exam and level of difficulty will be easy with summary of course, list of chapters, along with the summary of each chapters, topic list in each chapter ALL RESULT\nin JSON FORMAT\n"},
          ],
        },
        {
          role: "model",
          parts: [
            {text: "```json\n{\n  \"course_title\": \"Python Fundamentals Exam - Study Guide (Easy)\",\n  \"course_summary\": \"This study guide provides a concise and accessible overview of fundamental Python programming concepts. It's tailored for beginners preparing for an introductory Python exam, focusing on core syntax, data structures, control flow, and basic function usage. The aim is to build a strong foundation for further Python learning.\",\n  \"difficulty\": \"Easy\",\n  \"chapters\": [\n    {\n      \"chapter_number\": 1,\n      \"chapter_title\": \"Introduction to Python\",\n      \"chapter_summary\": \"This chapter introduces Python, its characteristics, uses, and how to get started.  It covers installation and a basic 'Hello, World!' program.\",\n      \"topics\": [\n        \"What is Python?\",\n        \"Why use Python?\",\n        \"Python's features (readability, interpreted, dynamic typing)\",\n        \"Common use cases (web development, data analysis, scripting)\",\n        \"Installing Python (Windows, macOS, Linux)\",\n        \"Using the Python interpreter\",\n        \"Writing and running a 'Hello, World!' program\"\n      ]\n    },\n    {\n      \"chapter_number\": 2,\n      \"chapter_title\": \"Data Types and Variables\",\n      \"chapter_summary\": \"This chapter covers Python's basic data types and how to store values in variables.  It includes assignment and basic arithmetic operations.\",\n      \"topics\": [\n        \"Data types: integers (int), floats (float), strings (str), booleans (bool)\",\n        \"Variables: assigning values, naming conventions\",\n        \"Assignment operator (=)\",\n        \"Arithmetic operators: +, -, *, /, // (integer division), % (modulo), ** (exponentiation)\",\n        \"String concatenation\",\n        \"Type conversion: int(), float(), str()\",\n        \"Comments: single-line (#) and multi-line (''') comments\"\n      ]\n    },\n    {\n      \"chapter_number\": 3,\n      \"chapter_title\": \"Input and Output\",\n      \"chapter_summary\": \"This chapter explains how to get input from the user and display output to the console.\",\n      \"topics\": [\n        \"The `print()` function: displaying output\",\n        \"The `input()` function: accepting user input\",\n        \"String formatting: f-strings (formatted string literals)\",\n        \"Converting input to different data types (e.g., `int(input())`)\",\n        \"Displaying multiple values with `print()`\"\n      ]\n    },\n    {\n      \"chapter_number\": 4,\n      \"chapter_title\": \"Conditional Statements (if-else)\",\n      \"chapter_summary\": \"This chapter introduces conditional statements to control the flow of execution based on conditions.\",\n      \"topics\": [\n        \"Comparison operators: == (equal), != (not equal), > (greater than), < (less than), >= (greater than or equal to), <= (less than or equal to)\",\n        \"Logical operators: `and`, `or`, `not`\",\n        \"The `if` statement\",\n        \"The `if-else` statement\",\n        \"The `if-elif-else` statement\",\n        \"Nested `if` statements (simple examples)\"\n      ]\n    },\n    {\n      \"chapter_number\": 5,\n      \"chapter_title\": \"Loops (for and while)\",\n      \"chapter_summary\": \"This chapter covers how to repeat a block of code using `for` and `while` loops.\",\n      \"topics\": [\n        \"The `for` loop: iterating over a sequence (string, list, range)\",\n        \"The `while` loop: executing code while a condition is true\",\n        \"The `range()` function: generating a sequence of numbers\",\n        \"The `break` statement: exiting a loop prematurely\",\n        \"The `continue` statement: skipping to the next iteration\",\n        \"Looping through strings\",\n        \"Basic nested loops\"\n      ]\n    },\n    {\n      \"chapter_number\": 6,\n      \"chapter_title\": \"Lists\",\n      \"chapter_summary\": \"This chapter introduces lists, which are ordered collections of items.\",\n      \"topics\": [\n        \"Creating lists: using square brackets []\",\n        \"Accessing list elements: indexing (e.g., `my_list[0]`)\",\n        \"List slicing: extracting a portion of a list (e.g., `my_list[1:4]`)\",\n        \"List methods: `append()`, `insert()`, `remove()`, `pop()`, `len()`, `index()`, `count()`\",\n        \"Iterating through a list using a `for` loop\",\n        \"Checking for membership: using the `in` operator\",\n        \"Modifying lists: adding, removing, and changing elements\"\n      ]\n    },\n    {\n      \"chapter_number\": 7,\n      \"chapter_title\": \"Functions\",\n      \"chapter_summary\": \"This chapter covers how to define and use functions to organize code.\",\n      \"topics\": [\n        \"Defining functions: using the `def` keyword\",\n        \"Function names and parameters\",\n        \"Calling functions\",\n        \"Passing arguments to functions (positional and keyword arguments)\",\n        \"Returning values from functions: using the `return` statement\",\n        \"Scope of variables (local and global variables - basic understanding)\",\n        \"Docstrings: documenting functions\",\n        \"Default parameter values\"\n      ]\n    }\n  ]\n}\n```"},
          ],
        },
      ],
    });
  
    //const result = await chatSession.sendMessage("INSERT_INPUT_HERE");
    //console.log(result.response.text());
 
